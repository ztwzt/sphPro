{"ast":null,"code":"import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport store from '@/store';\nVue.use(VueRouter);\n//导入路由配置\nimport routes from './routes';\n//备份push方法\nlet originPush = VueRouter.prototype.push;\nlet originReplace = VueRouter.prototype.replace;\n//重写路由方法 \nVueRouter.prototype.push = function (location, resolve, reject) {\n  if (resolve && reject) {\n    //call || apply相同点:都可以调用函数一次，都可以篡改函数上下文一次\n    // 区别：call传递参数用逗号隔开，apply传递数组\n    originPush.call(this, location, resolve, reject);\n  } else {\n    originPush.call(this, location, () => {}, () => {});\n  }\n};\nVueRouter.prototype.replace = function (location, resolve, reject) {\n  if (resolve && reject) {\n    //call || apply相同点:都可以调用函数一次，都可以篡改函数上下文一次\n    // 区别：call传递参数用逗号隔开，apply传递数组\n    originReplace.call(this, location, resolve, reject);\n  } else {\n    originReplace.call(this, location, () => {}, () => {});\n  }\n};\n//配置路由\nconst router = new VueRouter({\n  routes,\n  scrollBehavior(to, from, scrollBehavior) {\n    //vue 滚动行为\n    //x y 返回值代表滚动条位置\n    return {\n      y: 0\n    };\n  }\n});\n//全局前置守卫 登录跳转问题 \nrouter.beforeEach(async (to, from, next) => {\n  let token = store.state.user.token;\n  let name = store.state.user.userInfo.name;\n  if (token) {\n    //是否为toPath login 页面\n    if (to.path == '/Login') {\n      next('/home');\n    } else {\n      //有用户信息\n      if (name) {\n        next();\n      } else {\n        try {\n          //获取用户信息成功\n          await store.dispatch('getUserInfo');\n          next();\n        } catch (error) {\n          //清除token token 失效\n        }\n      }\n    }\n  } else {\n    next();\n  }\n});\nexport default router;\n//  注册完路由，所有组件都有$route $router","map":{"version":3,"names":["Vue","VueRouter","store","use","routes","originPush","prototype","push","originReplace","replace","location","resolve","reject","call","router","scrollBehavior","to","from","y","beforeEach","next","token","state","user","name","userInfo","path","dispatch","error"],"sources":["D:/MyProject/pro_sph/src/router/index.js"],"sourcesContent":["import Vue from \"vue\";\r\nimport VueRouter from \"vue-router\";\r\nimport store from '@/store'\r\nVue.use(VueRouter);\r\n//导入路由配置\r\nimport routes from './routes'\r\n//备份push方法\r\n let originPush=VueRouter.prototype.push;\r\n let originReplace=VueRouter.prototype.replace;\r\n //重写路由方法 \r\n VueRouter.prototype.push=function(location,resolve,reject){\r\n    if(resolve && reject)\r\n    {\r\n        //call || apply相同点:都可以调用函数一次，都可以篡改函数上下文一次\r\n        // 区别：call传递参数用逗号隔开，apply传递数组\r\n        originPush.call(this,location,resolve,reject)\r\n    }else{\r\n        originPush.call(this,location,()=>{},()=>{});\r\n    }\r\n }\r\n VueRouter.prototype.replace=function(location,resolve,reject){\r\n    if(resolve && reject)\r\n    {\r\n        //call || apply相同点:都可以调用函数一次，都可以篡改函数上下文一次\r\n        // 区别：call传递参数用逗号隔开，apply传递数组\r\n        originReplace.call(this,location,resolve,reject)\r\n    }else{\r\n        originReplace.call(this,location,()=>{},()=>{});\r\n    }\r\n }\r\n//配置路由\r\nconst router=new VueRouter({\r\n    routes,\r\n    scrollBehavior(to,from,scrollBehavior){\r\n        //vue 滚动行为\r\n        //x y 返回值代表滚动条位置\r\n        return {y:0}\r\n    }\r\n})\r\n//全局前置守卫 登录跳转问题 \r\nrouter.beforeEach(async (to,from,next)=>{\r\n    let token=store.state.user.token\r\n    let name=store.state.user.userInfo.name;\r\n    if(token){\r\n        //是否为toPath login 页面\r\n        if(to.path=='/Login')\r\n        {\r\n            next('/home')\r\n        }else{\r\n            //有用户信息\r\n            if(name)\r\n            {\r\n                next()\r\n            }else{\r\n                try{\r\n                    //获取用户信息成功\r\n                   await store.dispatch('getUserInfo')\r\n                   next()\r\n                }catch(error){\r\n                  //清除token token 失效\r\n                    \r\n                }\r\n            }\r\n        }\r\n    }else{\r\n        next()\r\n    }\r\n})  \r\nexport default router\r\n//  注册完路由，所有组件都有$route $router"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,SAAS;AAC3BF,GAAG,CAACG,GAAG,CAACF,SAAS,CAAC;AAClB;AACA,OAAOG,MAAM,MAAM,UAAU;AAC7B;AACC,IAAIC,UAAU,GAACJ,SAAS,CAACK,SAAS,CAACC,IAAI;AACvC,IAAIC,aAAa,GAACP,SAAS,CAACK,SAAS,CAACG,OAAO;AAC7C;AACAR,SAAS,CAACK,SAAS,CAACC,IAAI,GAAC,UAASG,QAAQ,EAACC,OAAO,EAACC,MAAM,EAAC;EACvD,IAAGD,OAAO,IAAIC,MAAM,EACpB;IACI;IACA;IACAP,UAAU,CAACQ,IAAI,CAAC,IAAI,EAACH,QAAQ,EAACC,OAAO,EAACC,MAAM,CAAC;EACjD,CAAC,MAAI;IACDP,UAAU,CAACQ,IAAI,CAAC,IAAI,EAACH,QAAQ,EAAC,MAAI,CAAC,CAAC,EAAC,MAAI,CAAC,CAAC,CAAC;EAChD;AACH,CAAC;AACDT,SAAS,CAACK,SAAS,CAACG,OAAO,GAAC,UAASC,QAAQ,EAACC,OAAO,EAACC,MAAM,EAAC;EAC1D,IAAGD,OAAO,IAAIC,MAAM,EACpB;IACI;IACA;IACAJ,aAAa,CAACK,IAAI,CAAC,IAAI,EAACH,QAAQ,EAACC,OAAO,EAACC,MAAM,CAAC;EACpD,CAAC,MAAI;IACDJ,aAAa,CAACK,IAAI,CAAC,IAAI,EAACH,QAAQ,EAAC,MAAI,CAAC,CAAC,EAAC,MAAI,CAAC,CAAC,CAAC;EACnD;AACH,CAAC;AACF;AACA,MAAMI,MAAM,GAAC,IAAIb,SAAS,CAAC;EACvBG,MAAM;EACNW,cAAcA,CAACC,EAAE,EAACC,IAAI,EAACF,cAAc,EAAC;IAClC;IACA;IACA,OAAO;MAACG,CAAC,EAAC;IAAC,CAAC;EAChB;AACJ,CAAC,CAAC;AACF;AACAJ,MAAM,CAACK,UAAU,CAAC,OAAOH,EAAE,EAACC,IAAI,EAACG,IAAI,KAAG;EACpC,IAAIC,KAAK,GAACnB,KAAK,CAACoB,KAAK,CAACC,IAAI,CAACF,KAAK;EAChC,IAAIG,IAAI,GAACtB,KAAK,CAACoB,KAAK,CAACC,IAAI,CAACE,QAAQ,CAACD,IAAI;EACvC,IAAGH,KAAK,EAAC;IACL;IACA,IAAGL,EAAE,CAACU,IAAI,IAAE,QAAQ,EACpB;MACIN,IAAI,CAAC,OAAO,CAAC;IACjB,CAAC,MAAI;MACD;MACA,IAAGI,IAAI,EACP;QACIJ,IAAI,CAAC,CAAC;MACV,CAAC,MAAI;QACD,IAAG;UACC;UACD,MAAMlB,KAAK,CAACyB,QAAQ,CAAC,aAAa,CAAC;UACnCP,IAAI,CAAC,CAAC;QACT,CAAC,QAAMQ,KAAK,EAAC;UACX;QAAA;MAGN;IACJ;EACJ,CAAC,MAAI;IACDR,IAAI,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AACF,eAAeN,MAAM;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}